# which branch should trigger a build
trigger:
  branches:
    include: [ master, release-* ]

# Global Variables:
#
# semanticVersion.<generated build number> gets set in a variable called VersionString.
#   VersionString is used to replace placeholders in assemblies and packages.
#
# isPrerelease controls whether the release artifacts on GitHub and the Powershell module
#   in the Powershell Gallery is marked as prerelease or not.
#
# isReleaseBranch controls whether packages will be generated and published.
#
variables:
  semanticVersion: "1.0.0"
  isPrerelease: ${{ true }}
  isReleaseBranch: $[ or( eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release-') ) ]
  shouldDeploy: $[ and( eq( variables.isPrerelease, false ), eq( variables.isReleaseBranch, true ) ) ]

jobs:
- job:
  displayName: "Windows Powershell Build"
  pool:
    vmImage: 'windows-latest'

  steps:
  - task: PowerShell@2
    inputs:
      targetType: filePath
      failOnStderr: true
      filePath: $(System.DefaultWorkingDirectory)\versionnumber.ps1
      arguments: $(Build.SourcesDirectory) $(semanticVersion) $(Build.BuildId)
    displayName: 'Setting build version'

  - task: PowerShell@2
    inputs:
      targetType: inline
      failOnStderr: true
      script: |
        Write-Host "PSModulePath = $($env:PSModulePath)"
        $local:TargetDir = (($env:PSModulePath -split ';') | Where-Object { Test-Path $_ })[0]
        if (-not $TargetDir)
        {
          throw "Unable to find a PSModulePath in your user profile (" + $env:UserProfile + "), PSModulePath: " + $env:PSModulePath
        }
        $local:TargetDir = (Resolve-Path $local:TargetDir)
        Write-Host "ModuleDir = $($local:TargetDir)"
        Write-Output "##vso[task.setvariable variable=ModuleDir;]$($local:TargetDir)"
    displayName: 'Find PowerShell module path'
    condition: succeeded()

  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: 'env | sort'
    displayName: 'Display environment variables'

  - task: PowerShell@2
    inputs:
      targetType: filePath
      filePath: $(System.DefaultWorkingDirectory)\install-forpipeline.ps1
      arguments: $(ModuleDir) $(VersionString) $$(isPrerelease)
    displayName: 'Building Powershell module'

  - task: PowerShell@2
    inputs:
      targetType: inline
      failOnStderr: true
      script: Import-Module -Name safeguard-discovery -Verbose
    displayName: 'Ensure that PowerShell module loads'
    condition: succeeded()

  - task: AzureKeyVault@1
    inputs:
      azureSubscription: 'OneIdentity.RD.SBox.Safeguard-ServiceConnection'
      KeyVaultName: 'SafeguardBuildSecrets'
      SecretsFilter: 'PowerShellGalleryApiKey'
    displayName: 'Get PowerShell Gallery API key from Sandbox Azure Key Vault'
    condition: and( succeeded(), eq( variables.shouldDeploy, true ) )

  - task: PowerShell@2
    inputs:
      targetType: inline
      failOnStderr: true
      script: Publish-Module -Path $(Build.SourcesDirectory)\safeguard-discovery -NuGetApiKey "$(PowerShellGalleryApiKey)" -Verbose -SkipAutomaticTags -Force
    displayName: 'Publish PowerShell module to PowerShell Gallery'
    condition: and( succeeded(), eq( variables.shouldDeploy, true ) )
        
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.SourcesDirectory)\safeguard-discovery'
      includeRootFolder: true 
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    displayName: 'Archiving Powershell module'
    condition: and(succeeded(), eq(variables.isReleaseBranch, true))

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'SafeguardDiscoveryModule'
    displayName: 'Publishing the artifacts'
    condition: and(succeeded(), eq(variables.isReleaseBranch, true))

  - task: GitHubRelease@1
    inputs:
      gitHubConnection: 'github.ReleaseServiceAccount'
      repositoryName: 'OneIdentity/safeguard-discovery'
      action: 'create'
      target: '$(Build.SourceVersion)'
      tagSource: 'userSpecifiedTag'
      tag: 'release-$(VersionString)'
      title: '$(VersionString)'
      isPreRelease: $(isPrerelease)
      changeLogCompareToRelease: 'lastFullRelease'
      changeLogType: 'commitBased'
      assets: |
        '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    displayName: 'Creating and publishing a release to Github'
    condition: and( succeeded(), eq( variables.shouldDeploy, true ) )
    